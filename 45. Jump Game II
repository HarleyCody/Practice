class Solution {
    public int jump(int[] A) {
	int jumps = 0, curEnd = 0, curFarthest = 0;
	for (int i = 0; i < A.length - 1; i++) {//贪心算法，遍历直到终点才进站继续跳，保证能便利到最后的时候才有用
		curFarthest = Math.max(curFarthest, i + A[i]);//设置最远距离
		if (i == curEnd) {//目前已经到达终点
			jumps++;//进站一次
			curEnd = curFarthest;//设置下一次的终点
		}
	}
	return jumps;//返回次数
}
}
public int jump(int[] nums) {

        int jumps = 0;
        int curEnd = 0;   // fastest distance we can reach in one interation
        int curFastest = 0;   // fastest distance we can reach so far
        int i = 0;
        for (; i <= curEnd && i < nums.length - 1; i ++) {
            curFastest = Math.max(curFastest, nums[i] + i);

             // we have made a movement
            if (i == curEnd && curFastest > curEnd) {
                jumps ++;
                curEnd = curFastest;
            }
        }

        return curFastest >= nums.length - 1 ? jumps : 0;
    }
