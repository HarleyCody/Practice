class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int N = graph.length;
        DSU dsu = new DSU(N);
        for (int i = 0; i < N; ++i)
            for (int j = i+1; j < N; ++j)
                if (graph[i][j] == 1)
                    dsu.union(i, j);// connect two point i ; j

        int[] count = new int[N];
        for (int node: initial)
            count[dsu.find(node)]++; // root contaning toxic node plus one

        int ans = -1, ansSize = -1;
        for (int node: initial) {
            int root = dsu.find(node);
            if (count[root] == 1) {  // unique color
                int rootSize = dsu.size(root);//get the size of root containing toxic node
                if (rootSize > ansSize) {
                    ansSize = rootSize;//update ans if new toxic root containing more nodes than previous root.
                    ans = node;
                } else if (rootSize == ansSize && node < ans) {// contaning same size of toxic node but occur ealier than ans; because initial is inordered.
                    ansSize = rootSize;//update size
                    ans = node;//update node number
                }
            }
        }

        if (ans == -1) {
            ans = Integer.MAX_VALUE;
            for (int node: initial)
                ans = Math.min(ans, node);
        }
        return ans;
    }
}


class DSU {// Disjoin Set Union
    int[] p, sz;//p = parent sz = size() size is valuable in combine two set to one

    DSU(int N) {
        p = new int[N];
        for (int x = 0; x < N; ++x)
            p[x] = x; //parent of node is node itself

        sz = new int[N];
        Arrays.fill(sz, 1);// size of all the nodes is 1
    }

    public int find(int x) {// find root of node x 
        if (p[x] != x)
            p[x] = find(p[x]);// get the root of node X
        return p[x];
    }

    public void union(int x, int y) {// combine two sets 
        int xr = find(x);
        int yr = find(y);
        p[xr] = yr; //combine x to y    yr is parent of xr
        sz[yr] += sz[xr]; // sz == if i is root how many node follows i
    }

    public int size(int x) {
        return sz[find(x)];// size is store in root 
    }
}
