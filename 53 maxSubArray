class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length == 0) return 0;
        int max = nums[0];

        for(int i=1; i<nums.length; ++i){
            if(nums[i-1] > 0) nums[i] += nums[i-1];//累加前n项，若n[i]为负数的话，可能被+=修改为正数，这样在i+1的情况时，i为正数，继续累加
            max = (max>nums[i])?max:nums[i];
        }
        return max;
    }
}

//在计算和的过程中，大小会因为负数和正数而改变。
//核心思想，最长连续子串里，和最大的应该满足，其任意的连续子串和都大于0。若前一个不大于0那么子串无法扩大，就不加前一个了，记录当前值的大小，跟最大值比较，新开头继续累加。
