class Solution {
    public int coinChange(int[] coins, int amount) {//dp: 状态取决于上一个状态
        int[] dp = new int[amount+1];// dp[i] 总数i需要的最小硬币数；
        Arrays.fill(dp,amount+1);//初始化为最大值；比较最小步数的时候可以改写。否则初始化默认为空，无法遍历到空的状态，每个状态最小值永远为0
        dp[0] = 0;//开始状态
        for(int i = 0; i <= amount; ++i){//一直试到总数
            for(int j = 0; j < coins.length; ++j){//每个硬币都试一遍
                if(i>=coins[j])
                dp[i] = Math.min(dp[i], dp[i-coins[j]]+1);
            }
        }
        return dp[amount] > amount? -1: dp[amount];//如果硬币数比总量都大（初始化设置Arrays.fill==未被重写==找不开。
    }
}
