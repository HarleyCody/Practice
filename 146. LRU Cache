class LRUCache {//LRU 最近访问的被保留
    private int capacity;
    LinkedHashMap<Integer,Integer> hm = null;
    public LRUCache(int capacity) {
        this.capacity = capacity;
        hm = new LinkedHashMap<Integer,Integer>(this.capacity,.75F,true){
            protected boolean removeEldestEntry(Map.Entry<Integer,Integer> eldest) {//重写LinkedList中的对应方法，也可以写在@Override 标签下面
                return size() > capacity;//重写的意义在于原removeEldestEntry的capacity 为MAX_ENTRIES,在LRU中需要更新为capacity，保证了capacity的大小
            }
        };
    }
    
    /*@Override
    protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {
        return size() > capacity; 
    }*/
    
    public int get(int key) {
        if(!hm.containsKey(key))return -1;//不存在返回1
        else return hm.get(key);//参在返回结果
    }
    
    public void put(int key, int value) {
        hm.put(key,value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

——————————————————————————————————————————————————————————————————简洁版——————————————————————————————————————————————————————————————
class LRUCache extends LinkedHashMap<Integer, Integer>{
    private int capacity;
    
    public LRUCache(int capacity) {
        super(capacity, 0.75F, true);//super调用父类，相当于父类的对象
        this.capacity = capacity;//this为当前类对象
    }

    public int get(int key) {
        return super.getOrDefault(key, -1);//重用父类的方法
    }

    public void put(int key, int value) {
        super.put(key, value);
    }

    @Override
    protected boolean removeEldestEntry(Map.Entry<Integer, Integer> eldest) {//重载父类的remove方法，因为需要改变MAX_ENTRIES 为capacity.
        return size() > capacity; 
    }
}
