——————————————————————————————————————————————————————————递归（faster）————————————————————————————————————————————————————————————————
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        if(head == null){
            return null;
        }
        
        ListNode cur = head;
        for(int i= 0; i< k-1; i++){
            cur = cur.next; //移到第K个Node
            if(cur == null){
                return head;//没有第K个Node K > len
            }
        }
        
        if(cur.next !=null){
            cur.next = reverseKGroup(cur.next, k);//逆置前K个，递归到最后一组需要逆置的尾巴地方；
        }
        
        ListNode ans = reverseHelper(head, cur);//逆置最后一组的头和尾
        return ans;
        
        
    }
    
    public ListNode reverseHelper(ListNode head, ListNode tail){//逆置，返回头
        ListNode poi = head;
        while(poi != tail){
            ListNode temp = poi.next;//保留头的下一个节点位置
            poi.next = tail.next;//头的下一个位置指向尾巴的下一个结点
            tail.next = poi;//尾巴的下一个结点指向头；实现逆序 例 1 2 3 4 5 （k=2）1 2 4 3 5 (4 3 逆序)，新的头结点插在旧的头节点之前。
            poi = temp;//头移动到原始的下一个结点
        }
        return tail;
    }
}
——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
            if(head == null) return null;
    int len = 0;
    ListNode cur = head;
    while (cur != null) {
        cur = cur.next;
        len++;
    }
    if(k == 0 || k > len) return head;
    int totalTimes = len / k;
    ListNode pre = null;
    cur = null;
    ListNode next = head;
    ListNode fakeHead = new ListNode(0);
    ListNode lastTail = fakeHead;
    ListNode lastHead = head;
    int times = 0;
    while (next != null) {
        pre = cur;               // 保存前一个
        cur = next;              // cur换到下一个
        next = next.next;        // 下一个准备
        cur.next = pre;          // 逆置前一个和后一个  后一个指向前一个，遍历
        times++;
        if(times == k) {        //遍历了K次，逆置了K次
            totalTimes--;
            lastTail.next = cur;//上一个尾巴连接下一个的头 0连2，1连4，3连5
            lastTail = lastHead;//上一个的头变成尾巴
            System.out.print(" T"+lastTail.val);
            lastHead = next;//上一个头移到下一个（next为逆置完之后原顺序中的Cur的后一个）
            System.out.print(" H"+lastHead.val);
            if(totalTimes == 0) {
                lastTail.next = next;//逆置完了，需要连接剩下的Nodes
                break;
            }
            pre = null;//没有逆置完，继续准备逆置
            cur = null;
            times = 0;
        }
    }
    return fakeHead.next;
    }
}
// 逆置+连接，逆置时可能reverse完成，可能还没完成。连接时可能已经完成，可能还未完成
