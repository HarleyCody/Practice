class Solution {
    public void gameOfLife(int[][] board) {
        int cells;
        int[][] calculator = new int[board.length][board[0].length];
        for(int i = 0; i < board.length; ++i){
            for(int j = 0; j < board[0].length; ++j){
                cells = cells(board, i, j);
                //System.out.print(cells);
                if(board[i][j] == 0 && cells == 3)calculator[i][j] = 1;//dead to live
                else if(board[i][j] == 1 && (cells == 3 ||cells == 2))calculator[i][j] = 1// live stay live;
            }
        }
        for(int i = 0; i < board.length; ++i){
            for(int j = 0; j < board[0].length; ++j){
                board[i][j] = calculator[i][j];
            }
        }
    }
    
    public int cells(int[][] board, int row, int column){//calculate the number of surrounding living cells 
        int aliveCell = 0;
        aliveCell += (row -1 >=0 && column -1 >=0)? board[row-1][column-1]:0;
        aliveCell += (column -1 >=0)? board[row][column-1]:0;
        aliveCell += (row +1 < board.length && column -1 >=0)? board[row+1][column-1]:0;
        
        aliveCell += (row -1 >=0)? board[row-1][column]:0;
        aliveCell += (row +1 < board.length) ? board[row+1][column]:0;
                      
        aliveCell += (row -1 >=0 && column +1 < board[0].length)? board[row-1][column+1]:0;
        aliveCell += (column+1 < board[0].length)? board[row][column+1]:0;
        aliveCell += (row +1 < board.length && column +1 < board[0].length)? board[row+1][column+1]:0;
        return aliveCell;
    }
}
