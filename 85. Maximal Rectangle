class Solution {

    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0) return 0;
        int m = matrix.length;
        int n = matrix[0].length;

        int[] left = new int[n]; // initialize left as the leftmost boundary possible
        int[] right = new int[n];
        int[] height = new int[n];

        Arrays.fill(right, n); // initialize right as the rightmost boundary possible

        int maxarea = 0;
        for(int i = 0; i < m; i++) {//一层一层的往下增加
            int cur_left = 0, cur_right = n;
            // update height
            for(int j = 0; j < n; j++) {
                if(matrix[i][j] == '1') height[j]++;// find continous height, so ++i;
                else height[j] = 0; // height is not continous, break by 0 , so set it to original;
            }
            // update left
            for(int j=0; j<n; j++) {
                if(matrix[i][j]=='1') left[j]=Math.max(left[j],cur_left);//用于比较上一个和左边的起始位置，如果上面的大，说明上面的窄，只能按照上面的值
                else {left[j]=0; cur_left=j+1;}//left is break by 0, set it to 0, accumulate later. Cur_left point to index of next point
            }
            // update right
            for(int j = n - 1; j >= 0; j--) {//用于比较上一个和右边的结束位置，如果上面的小，说明上面的窄，只能按照上面的值
                if(matrix[i][j] == '1') right[j] = Math.min(right[j], cur_right);
                else {right[j] = n; cur_right = j;}    
            }
            // update area
            System.out.print("int row:"+i);
            for(int j = 0; j < n; ++j){
                System.out.print(" (H:"+height[j]+" L:"+left[j]+" R:"+right[j]+")");
            }
            System.out.println();
            for(int j = 0; j < n; j++) {
                maxarea = Math.max(maxarea, (right[j] - left[j]) * height[j]);
            }
        }
        return maxarea;
    }
}
/*
int row:0 (H:1 L:0 R:1) (H:0 L:0 R:5) (H:1 L:2 R:3) (H:0 L:0 R:5) (H:0 L:0 R:5)
int row:1 (H:2 L:0 R:1) (H:0 L:0 R:5) (H:2 L:2 R:3) (H:1 L:2 R:5) (H:1 L:2 R:5)
int row:2 (H:3 L:0 R:1) (H:1 L:0 R:5) (H:3 L:2 R:3) (H:2 L:2 R:5) (H:2 L:2 R:5)
int row:3 (H:4 L:0 R:1) (H:0 L:0 R:5) (H:0 L:0 R:5) (H:3 L:3 R:4) (H:0 L:0 R:5)
*/
______________________________________________________________优化，自己默写后_____________________________________________________________
class Solution {
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0 ) return 0;
        int r = matrix.length, c = matrix[0].length; 
        int[] left = new int[c];
        int[] right = new int[c];
        int[] height = new int[c];
        int lt = 0, rt = c, maxArea = 0;
        Arrays.fill(right,c);
        
        for(int i = 0; i < r; ++i){
            lt = 0; rt = c;
            for(int j = 0; j < c; ++j){
                if(matrix[i][j] == '1') ++height[j];
                else height[j] = 0;
            }
            
            for(int j = 0; j < c; ++j){
                if(matrix[i][j] == '1') left[j] = Math.max(left[j], lt);
                else{ left[j] = 0; lt = j+1;}
            }

            for(int j = c-1; 0 <= j; --j){
                if(matrix[i][j] == '1') right[j] = Math.min(right[j], rt);
                else{ right[j] = c; rt = j;}
            }
            
            for(int j = 0; j < c; ++j){
                maxArea = Math.max(maxArea, ( right[j] - left[j] ) * height[j]);
            }
        }
        return maxArea;
    }
}
