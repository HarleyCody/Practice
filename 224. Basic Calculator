class Solution {
    public int calculate(String s) {
        
        Stack<Integer> stack = new Stack<>();// Cannot use Queue, because when it comes to multiple paremthsis, it cannot poll correct flag and num with same layer of num. it alwyas poll the outter most flag and num. 
        int num = 0, ans = 0, flag = 1;
        for(int i = 0; i < s.length(); ++i){
            if('0' <= s.charAt(i) && s.charAt(i) <= '9')// if char is number
                num = num * 10 + s.charAt(i) - '0';

            else if(s.charAt(i) == '+'){ // update and set flag.  !! All are before +
                ans += flag * num;
                num = 0;
                flag = 1;
                
            }else if(s.charAt(i) == '-'){
                ans += flag * num;
                num = 0;
                flag = -1;
                
            }else if(s.charAt(i) == '('){// push the information into the stack, retart calculation(flag and ans back to beginning)
                stack.push(ans);
                stack.push(flag);
                flag = 1;
                ans = 0;
                
            }else if(s.charAt(i) == ')'){// read information from last layer. Update ans, and nums. Do not change flag here!!!!
                ans += flag * num; 
                num = 0;
                ans *= stack.pop();
                ans += stack.pop();
            }
        }
        if(num != 0) ans += flag * num;// if the calculation is ended by number. The last num has been calculated yet.
        return ans;
    }
}
