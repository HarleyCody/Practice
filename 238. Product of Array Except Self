class Solution {
    public int[] productExceptSelf(int[] nums) {
        if(nums.length == 0)return nums;
        int mul = 1, zero = 0;
        for(int i = 0; i < nums.length; ++i){
            if(nums[i] != 0)mul *= nums[i];
            else ++zero;
        }
        for(int i = 0; i < nums.length; ++i){
            if (zero > 1){
                mul = 0;
                nums[i] = 0;
            } 
            else if(zero == 1){
                if(nums[i] == 0) nums[i] = mul;
                else nums[i] = 0;
            }else nums[i] = mul/nums[i];
        }
        return nums;
    }
}

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
class Solution {
    public int[] productExceptSelf(int[] nums) {
        int [] ans = new int[nums.length];
        ans[0] = 1;//记录左边所有的积；
        for(int i = 1; i < nums.length; ++i){
            ans[i] = ans[i-1] * nums[i-1];//i左边所有乘积为第i-1项以前的乘积 * 第i-1项;
        }
        int right = 1;
        for(int i = nums.length-1; 0 <= i; --i){//同理计算右边积，遍历所有数
            ans[i] *= right;//左边乘积 * 右边乘积 == 除i以外的结果
            right *= nums[i];//i-1项的右边乘积
        }
        return ans;
    }
}
