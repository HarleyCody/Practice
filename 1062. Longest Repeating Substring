_______________________________________________________Best Solution Rabin Karp_________________________________________________________
class Solution {

  public int search(int L, int a, long modulus, int n, int[] nums) {
    // compute the hash of string S[:L]
    long h = 0;
    for(int i = 0; i < L; ++i) h = (h * a + nums[i]) % modulus;

    // already seen hashes of strings of length L
    HashSet<Long> seen = new HashSet();
    seen.add(h);
    // const value to be used often : a**L % modulus
    long aL = 1;
    for (int i = 0; i < L; ++i) aL = (aL * a) % modulus;

    for(int start = 1; start < n - L + 1; ++start) {
      // compute rolling hash in O(1) time
      h = (h * a - nums[start - 1] * aL % modulus + modulus) % modulus;
      h = (h + nums[start + L - 1]) % modulus;
      if (seen.contains(h)) return start;
      seen.add(h);
    }
    return -1;
  }

  public int longestRepeatingSubstring(String S) {
    int n = S.length();

    int[] nums = new int[n];
    for(int i = 0; i < n; ++i) nums[i] = (int)S.charAt(i) - (int)'a';
    // base value for the rolling hash function
    int a = 26;
    // modulus value for the rolling hash function to avoid overflow
    long modulus = (long)Math.pow(2, 24);

    // binary search, L = repeating string length
    int left = 1, right = n;
    int L;
    while (left <= right) {
      L = left + (right - left) / 2;
      if (search(L, a, modulus, n, nums) != -1) left = L + 1;
      else right = L - 1;
    }
    return left - 1;
  }
}
_______________________________________________________Fastest Solution_______________________________________________________
class Solution {
// if in len l there is duplicate, clear set and try len + 1 from i = 0
    public int longestRepeatingSubstring(String S) {
        int l = S.length(), size = 0, i = 0;
        Set<String> set = new HashSet<>();
        while (i <= l) {
            int j = i;
            if (j + size == l) return size;
            String sub = S.substring(j, j + size + 1);
            if (set.contains(sub)) {
                i = 0;
                size++;
                set.clear();
            }
            else{
                i++;
                set.add(sub);
            }
        }
        return size;
    }
}

_______________________________________________________My Solution___________________________________________________________
// Binary search + checked repeat
class Solution {
    int max = 0;
    public int longestRepeatingSubstring(String S) {
        int i = 0, j = S.length();
        while(i < j){
            int mid = (i + j) / 2;
            if(repeatedString(S, mid)){
                i = mid + 1;
                max = mid;
            }else{
                j = mid;
            }
        }
        return max;
    }
    private boolean repeatedString(String s, int len){
        HashSet<String> recorder = new HashSet();
        for(int i = 0; i <= s.length() - len; ++i){
            String cur = s.substring(i, i + len);
            if(recorder.contains(s.substring(i, i + len))) return true;
            recorder.add(cur);
        }
        return false;
    }
}
